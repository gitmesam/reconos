library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

--library proc_common_v1_00_b;
--use proc_common_v1_00_b.proc_common_pkg.all;

library reconos_v2_01_a;
use reconos_v2_01_a.reconos_pkg.all;

entity tlb_dcr is
	generic
	(
		C_DCR_BASEADDR        : std_logic_vector := "1111111111";
		C_DCR_HIGHADDR        : std_logic_vector := "0000000000";
		C_DCR_AWIDTH          : integer          := 10;
		C_DCR_DWIDTH          : integer          := 32
	);
	port
	(
		clk                : in  std_logic;
		rst                : in  std_logic;
		
		o_invalidate       : out std_logic;
		
		-- dcr bus protocol ports
		o_dcrAck   : out std_logic;
		o_dcrDBus  : out std_logic_vector(C_DCR_DWIDTH - 1 downto 0);
		i_dcrABus  : in  std_logic_vector(C_DCR_AWIDTH - 1 downto 0);
		i_dcrDBus  : in  std_logic_vector(C_DCR_DWIDTH - 1 downto 0);
		i_dcrRead  : in  std_logic;
		i_dcrWrite : in  std_logic
	);
end entity;

architecture imp of tlb_dcr is

	constant C_INVALIDATE_PID : std_logic_vector := X"00";
	constant C_INVALIDATE     : std_logic_vector := X"01";
	constant C_SET_PID        : std_logic_vector := X"02";

	signal dcr_hit  : std_logic;
	signal pid      : std_logic_vector(15 downto 0);
begin

	o_dcrDBus <= i_dcrDBus;

	process (i_dcrABus)
	begin
		dcr_hit <= '0';
		if i_dcrABus = C_DCR_BASEADDR then
			dcr_hit <= '1';
		end if;
	end process;
	
	process (clk, rst)
		variable cmd  : std_logic_vector(7 downto 0);
		variable data : std_logic_vector(15 downto 0);
	begin
		if rst = '1' then
			o_dcrAck <= '0';
			cmd  := (others => '0');
			data := (others => '0');
			pid  <= (others => '0');
			o_invalidate <= '0';
		elsif rising_edge(clk) then
			o_dcrAck <= dcr_hit;
			o_invalidate <= '0';
			if dcr_hit = '1' and i_dcrWrite = '1' then
				data := i_dcrDBus(15 downto 0);
				cmd  := i_dcrDBus(31 downto 24);
				case cmd is
					when C_SET_PID =>
						pid <= data;
						o_invalidate <= '1';
					when C_INVALIDATE =>
						o_invalidate <= '1';
					when C_INVALIDATE_PID =>
						if pid = data then o_invalidate <= '1'; end if;
					when others =>
						NULL;
				end case;
			end if;
		end if;
	end process;
	
end architecture;

